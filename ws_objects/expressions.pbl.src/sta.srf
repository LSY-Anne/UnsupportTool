$PBExportHeader$sta.srf
global type sta from function_object
end type

forward prototypes
global function string sta (integer al_sta)
end prototypes

global function string sta (integer al_sta);//// 09-06-2005 - Made to mirror the PREV() function
//RETURN RDInfo(al_sta,0,'RD')

//long ll_row , ll_tour , ll_sta , ll_shift_no , ll_rev_no , ll_reading_id
string ls_reading
//date ldt_date

//**IF w_tour.ids_evaluate.RowCount() > 0 THEN

//[NPTS]
//ll_shift_no		= gsu_Tour_Parameters[gi_Current_Tour].shift_no//**
//ll_tour			= gsu_Tour_Parameters[gi_Current_Tour].tour_number//**
//ldt_date 		= gsu_Tour_Parameters[gi_Current_Tour].tour_date//**
//ll_rev_no		= gsu_Tour_Parameters[gi_Current_Tour].rev_no//**
////**	ll_tour			= w_tour.ids_evaluate.object.tour[1]
////**	ll_rev_no		= w_tour.ids_evaluate.object.rev_no[1]
////**	ll_sta			= w_tour.ids_evaluate.object.sta[1]
////**	ldt_date 		= Date(w_tour.ids_evaluate.object.dt[1])
////**	ll_shift_no		= w_tour.ids_evaluate.object.shift_no[1]
//	IF ll_sta = al_sta THEN
////**		ll_reading_id	= w_tour.ids_evaluate.object.reading_id[1]
//		ll_reading_id	= gsu_Tour_Parameters[gi_Current_Tour].reading_id//**
//	ELSE
//		ll_reading_id	= 0
//	END IF

//[NPTS]
	long ll_Row_found
	// assuming reading_id = 0
	ll_Row_Found = w_tour.tab_tour.tabpage_readings.dw_readings.Find(' station_sta = ' + String(al_Sta), 1, w_tour.tab_tour.tabpage_readings.dw_readings.RowCount())
	IF ( ll_Row_Found > 0 ) THEN
		ls_Reading = w_tour.tab_tour.tabpage_readings.dw_readings.GetItemString(ll_Row_Found, 'history_rd')
	ELSE
		long ll_tour, ll_shift_no, ll_rev_no, ll_reading_id
		date ldt_date
		ll_shift_no		= gsu_Tour_Parameters[gi_Current_Tour].shift_no
		ll_tour			= gsu_Tour_Parameters[gi_Current_Tour].tour_number
		ldt_date 		= gsu_Tour_Parameters[gi_Current_Tour].tour_date
		ll_rev_no		= gsu_Tour_Parameters[gi_Current_Tour].rev_no
		ll_reading_id	= gsu_Tour_Parameters[gi_Current_Tour].reading_id

		SELECT rd
		  INTO :ls_reading
		  FROM history
		 WHERE dt = :ldt_date AND
				 tour = :ll_tour AND
				 sta = :al_sta AND
				 shift_no = :ll_shift_no AND
				 reading_id = :ll_reading_id ;
		
		IF ( SQLCA.SQLNRows = 0 ) THEN
			ls_Reading = ''
		END IF
	END IF

//	SELECT rd
//	  INTO :ls_reading
//	  FROM history
//	 WHERE dt = :ldt_date AND
//	       tour = :ll_tour AND
//			 sta = :al_sta AND
//			 shift_no = :ll_shift_no AND
//			 reading_id = :ll_reading_id ;
			 
//**END IF

IF Empty(ls_Reading) THEN
	ls_reading	= "Reading Not Found"
ELSE
	ls_reading	= Trim(ls_reading)
END IF

//MessageBox('sta return',String(ldt_date)+'~nTour: '+String(ll_tour)+'~nRevno: '+String(ll_rev_no)+'~nStation: '+String(ll_sta)+'~nShift: '+String(ll_shift_no)+'~nReading: '+ls_reading)

RETURN Upper(ls_reading)

//integer li_tour, li_shift_no
//string ls_Reading
//date ld_date
//integer li_rev_no
//string ls_Erd
//
//IF IsValid(w_tour) THEN
//	li_rev_no	= w_tour.tab_tour.tabpage_readings.dw_readings.Object.history_rev_no[w_tour.tab_tour.tabpage_readings.dw_readings.GetRow()]
//ELSE
//	RETURN "Error"
//END IF
//	
//li_tour		= gsu_Tour_Parameters[gi_Current_Tour].tour_number
//ld_date 		= gsu_Tour_Parameters[gi_Current_Tour].tour_date
//li_shift_no	= gsu_Tour_Parameters[gi_Current_Tour].shift_no
//
//SELECT erd 
//  INTO :ls_Erd 
//  FROM station 
// WHERE ( sta = :station ) 
//   AND ( tour = :li_tour ) 
//	AND ( rev_no = :li_rev_no ) ;
//
//IF NOT gb_Final_Close AND NOT Empty(ls_Erd) THEN
//	//Evaluate the expression
//	ls_Erd = "Evaluate('" + ls_Erd + "', 0)"
//	ls_Reading = w_tour.ids_evaluate.Describe(ls_Erd)
//	
////	//Now put the value into the database
////	
////	UPDATE history 
////	   SET rd = :ls_Reading 
////   WHERE ( dt = :ld_date ) 
////     AND ( sta = :station ) 
////     AND ( tour = :li_tour ) 
////	  AND ( rev_no = :li_rev_no ) 
////	  AND ( reading_id = 0 ) 
////     AND ( shift_no = :li_shift_no ) 
////	USING SQLCA ;
//
//ELSE
//
//	SELECT rd 
//	  INTO :ls_Reading 
//	  FROM history 
//	 WHERE ( dt = :ld_date ) 
//		AND ( sta = :station ) 
//		AND ( tour = :li_tour ) 
//		AND ( reading_id = 0 ) 
//		AND ( shift_no = :li_shift_no ) 
//	 USING SQLCA ;
//
//	IF ( SQLCA.SQLCode <> 0 ) THEN
//		ls_Reading = "Rd Not Found"
//	END IF
//END IF
//IF IsNull(ls_Reading) THEN
//	ls_Reading = "Rd is Null"
//END IF
//
//RETURN ls_Reading
end function

