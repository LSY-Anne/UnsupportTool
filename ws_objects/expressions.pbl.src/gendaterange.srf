$PBExportHeader$gendaterange.srf
global type gendaterange from function_object
end type

forward prototypes
global function string gendaterange (integer ll_sta, string ls_start_date, string ls_end_date, string return_type)
end prototypes

global function string gendaterange (integer ll_sta, string ls_start_date, string ls_end_date, string return_type);long ll_tour , ll_shift_no ,ll_start_shift,ll_end_shift,ll_shift, ll_count,ll_retrieved
string ls_reading
datetime ld_start,ld_end,ldt_start_date,ldt_end_date,ld_dt
dec ldb_reading,ldb_count,ldb_min,ldb_max,ldb_range,ldb_sum,ldb_average
dec ldb_r2_sum,ldb_std,ldb_sampstd
string ls_Sql
DataStore ds_lastx
ds_lastx = CREATE datastore

// 2010-10-05 - RPR corrected for localization WRT Date(~string~) and the string is NOT in the localized format.
//              This is still expecting a string in the format mm-dd-yyyy
	integer li_Year, li_Month, li_Day
	li_Year	= Integer(Mid(ls_start_date,7,4))
	li_Month	= Integer(Mid(ls_start_date,1,2))
	li_Day	= Integer(Mid(ls_start_date,4,2))
	
	ldt_start_date	= DateTime(Date(li_Year, li_Month, li_Day), Time(Mid(ls_start_date,12,5)))
	
	li_Year	= Integer(Mid(ls_end_date,7,4))
	li_Month	= Integer(Mid(ls_end_date,1,2))
	li_Day	= Integer(Mid(ls_end_date,4,2))
	
	ldt_end_date	= DateTime(Date(li_Year, li_Month, li_Day), Time(Mid(ls_end_date,12,5)))
	
	//ldt_start_date	= DateTime(Date(Mid(ls_start_date,1,10)),Time(Mid(ls_start_date,12,5)))
	//ldt_end_date	= DateTime(Date(Mid(ls_end_date,1,10)),Time(Mid(ls_end_date,12,5)))
// ^^ 2010-10-05 - RPR

//**ll_tour			= w_tour.ids_evaluate.object.tour[1]
//**ll_shift_no		= w_tour.ids_evaluate.object.shift_no[1]
ll_shift_no		= gsu_Tour_Parameters[gi_Current_Tour].shift_no//**
ll_tour			= gsu_Tour_Parameters[gi_Current_Tour].tour_number//**

ld_start			= DateTime(Date(ldt_start_date))
ld_end			= DateTime(Date(ldt_end_date))
ldb_reading		= 0
ldb_count		= 0
ldb_sum			= 0
ldb_r2_sum		= 0
ldb_max			= dec("-1E18")
ldb_min			= dec("1E18")

ll_count		= 1

//ds_lastx.DataObject = 'dw_date_range_datastore'
//ds_lastx.SetTransObject( SQLCA )
//ll_retrieved = ds_lastx.Retrieve(ll_tour,ll_sta,ldt_start_date,ldt_end_date,ll_shift_no)

ls_Sql = " &
  SELECT rd,dt,shift_no &
    FROM history &
   WHERE ( tour = " + String(ll_tour) + " ) AND &
         ( sta = " + String(ll_sta) + " ) AND &
         ( dt >= '" + String(ldt_start_date, 'yyyy-mm-dd') + "' ) AND &
         ( ( dt < '" + String(ldt_end_date, 'yyyy-mm-dd') + "' ) OR &
         ( dt = '" + String(ldt_end_date, 'yyyy-mm-dd') + "' AND shift_no <= " + String(ll_shift_no) + " ) ) AND &
         ( reading_id = 0 ) &
ORDER BY dt DESC , shift_no DESC "

ll_Retrieved = f_Datastore_From_Sql(ls_Sql, ds_lastx)

//MessageBox(return_type,String(ll_sta)+'~n'+String(ldt_start_date)+'~n'+String(ldt_end_date)+'~nRows:'+String(ll_retrieved))

IF ( ll_Retrieved > 0 ) THEN
	DO WHILE TRUE
		IF ll_count > ds_lastx.RowCount() THEN
			EXIT
		ELSE
			ls_reading	= ds_lastx.object.rd[ll_count]
			ld_dt			= ds_lastx.object.dt[ll_count]
			ll_shift		= ds_lastx.object.shift_no[ll_count]
			ll_count = ll_count + 1
		END IF
		
		IF IsNumber(ls_reading) THEN
			ldb_count	= ldb_count + 1
			ldb_reading = N(ls_reading)
			ldb_sum		= ldb_sum + ldb_reading
			ldb_min		= Min(ldb_min,ldb_reading)
			ldb_max		= Max(ldb_max,ldb_reading)
			ldb_r2_sum	= ldb_r2_sum + ldb_reading ^ 2
			IF ldb_count = 1 THEN
				ldt_end_date	= ld_dt
				ll_end_shift	= ll_shift
			END IF
			ldt_start_date	= ld_dt
			ll_start_shift	= ll_shift
		END IF
	LOOP
END IF

DESTROY ds_lastx

IF ldb_count = 0 THEN
	
	ls_reading	= "Reading Not Found"
	
ELSEIF return_type = "MIN" THEN
	
	ls_reading	= String(ldb_min)
	
ELSEIF return_type = "MAX" THEN
	
	ls_reading	= String(ldb_max)
	
ELSEIF return_type = "COUNT" THEN
	
	ls_reading	= String(ldb_count)
	
ELSEIF return_type = "SUM" THEN
	
	ls_reading	= String(ldb_sum)
	
ELSEIF return_type = "AVERAGE" THEN
	
	ldb_average	= ldb_sum/ldb_count
	ls_reading	= String(ldb_average)
	
ELSEIF return_type = "RANGE" THEN
	
	ldb_range	= ldb_max - ldb_min
	ls_reading	= String(ldb_range)
	
ELSEIF return_type = "STD" OR return_type = "VAR" THEN
	
	IF (ldb_count - ldb_average^2) <> 0 THEN
		ldb_average	= ldb_sum/ldb_count
		ldb_std		= Sqrt(ldb_r2_sum / ldb_count - ldb_average^2 )
		IF return_type = "STD" THEN
			ls_reading	= String(ldb_std)
		ELSE
			ls_reading	= String(ldb_std^2)
		END IF
	ELSE
		ls_reading	= "Insufficient Data"
	END IF
	
ELSEIF return_type = "SAMPSTD" OR return_type = "SAMPVAR" THEN
	
	IF ldb_count > 1 THEN
		ldb_average	= ldb_sum/ldb_count
		ldb_sampstd	= Sqrt( (ldb_r2_sum - ldb_sum^2/ldb_count) / (ldb_count - 1) )
		IF return_type = "SAMPSTD" THEN
			ls_reading	= String(ldb_sampstd)
		ELSE
			ls_reading	= String(ldb_sampstd^2)
		END IF
	ELSE
		ls_reading	= "Insufficient Data"
	END IF
	
ELSEIF return_type = "STARTDATE" THEN
	
	ls_reading	= String(ldt_start_date,"mm-dd-yyyy")+" "+String(ll_start_shift)
	
ELSEIF return_type = "ENDDATE" THEN
	
	ls_reading	= String(ldt_end_date,"mm-dd-yyyy")+" "+String(ll_end_shift)
	
ELSE
	
	ls_reading	= "Invalid Type"
	
END IF

return Upper(ls_reading)

//integer li_Tour
//integer li_sta, li_shift_no ,li_start_shift,li_end_shift,li_shift
//string ls_reading
//datetime ld_start,ld_end,ld_start_date,ld_end_date,ld_dt,start_date,end_date
//dec ldb_reading,ldb_count,ldb_min,ldb_max,ldb_range,ldb_sum,ldb_average
//dec ldb_r2_sum,ldb_std,ldb_sampstd
//dataStore ds_daterange
//long ll_count, ll_retrieved, ll_Row_Count
//integer li_Rev_No
//
//start_date	= DateTime(Date(Mid(ls_start_date,1,10)),Time(Mid(ls_start_date,12,5)))
//end_date		= DateTime(Date(Mid(ls_end_date,1,10)),Time(Mid(ls_end_date,12,5)))
//
//li_tour			= gsu_Tour_Parameters[gi_Current_Tour].tour_number
//li_rev_no		= gsu_Tour_Parameters[gi_Current_Tour].rev_no
//li_sta			= sta
//li_shift_no		= gsu_Tour_Parameters[gi_Current_Tour].shift_no
//ld_start			= DateTime(Date(start_date))
//ld_end			= DateTime(Date(end_date))
//ldb_reading		= 0
//ldb_count		= 0
//ldb_sum			= 0
//ldb_r2_sum		= 0
//ldb_max			= dec("-1E308")
//ldb_min			= dec("1E308")
//
//ll_count		= 1
//
//ds_daterange = CREATE datastore
//ds_daterange.DataObject = 'dw_date_range_datastore'
//ds_daterange.SetTransObject( SQLCA )
//
//ll_retrieved = ds_daterange.Retrieve(li_tour,li_rev_no,li_sta,start_date,end_date,li_shift_no)
//ll_Row_Count = ds_daterange.RowCount()
//DO WHILE TRUE
//	IF ( ll_count > ll_Row_Count ) THEN
//		EXIT
//	ELSE
//		ls_reading	= ds_daterange.object.rd[ll_count]
//		ld_dt			= ds_daterange.object.dt[ll_count]
//		li_shift		= ds_daterange.object.shift_no[ll_count]
//		ll_count		= ll_count + 1
//	END IF
//	
//	IF IsNumber(ls_reading) THEN
//		ldb_count	= ldb_count + 1
//		ldb_reading = N(ls_reading)
//		ldb_sum		= ldb_sum + ldb_reading
//		ldb_min		= Min(ldb_min,ldb_reading)
//		ldb_max		= Max(ldb_max,ldb_reading)
//		ldb_r2_sum	= ldb_r2_sum + ldb_reading ^ 2
//		IF ( ldb_count = 1 ) THEN
//			ld_end_date		= ld_dt
//			li_end_shift	= li_shift
//		END IF
//		ld_start_date	= ld_dt
//		li_start_shift	= li_shift
//	END IF
//LOOP
//
//DESTROY ds_daterange
//
//IF ldb_count = 0 THEN
//	ls_reading	= "Rd Not Found"
//ELSEIF return_type = "MIN" THEN
//	ls_reading	= String(ldb_min)
//ELSEIF return_type = "MAX" THEN
//	ls_reading	= String(ldb_max)
//ELSEIF return_type = "COUNT" THEN
//	ls_reading	= String(ldb_count)
//ELSEIF return_type = "SUM" THEN
//	ls_reading	= String(ldb_sum)
//ELSEIF return_type = "AVERAGE" THEN
//	ldb_average	= ldb_sum/ldb_count
//	ls_reading	= String(ldb_average)
//ELSEIF return_type = "RANGE" THEN
//	ldb_range	= ldb_max - ldb_min
//	ls_reading	= String(ldb_range)
//ELSEIF return_type = "STD" OR return_type = "VAR" THEN
//	IF ( (ldb_count - ldb_average^2) <> 0 ) THEN
//		ldb_average	= ldb_sum/ldb_count
//		ldb_std		= Sqrt(ldb_r2_sum / ldb_count - ldb_average^2 )
//		IF ( return_type = "STD" ) THEN
//			ls_reading	= String(ldb_std)
//		ELSE
//			ls_reading	= String(ldb_std^2)
//		END IF
//	ELSE
//		ls_reading	= "Insuff. Data"
//	END IF
//ELSEIF return_type = "SAMPSTD" OR return_type = "SAMPVAR" THEN
//	IF ( ldb_count > 1 ) THEN
//		ldb_average	= ldb_sum/ldb_count
//		ldb_sampstd	= Sqrt( (ldb_r2_sum - ldb_sum^2/ldb_count) / (ldb_count - 1) )
//		IF ( return_type = "SAMPSTD" ) THEN
//			ls_reading	= String(ldb_sampstd)
//		ELSE
//			ls_reading	= String(ldb_sampstd^2)
//		END IF
//	ELSE
//		ls_reading	= "Insuff. Data"
//	END IF
//ELSEIF return_type = "STARTDATE" THEN
//	ls_reading	= String(ld_start_date,"mm-dd-yyyy")+" "+String(li_start_shift)
//ELSEIF return_type = "ENDDATE" THEN
//	ls_reading	= String(ld_end_date,"mm-dd-yyyy")+" "+String(li_end_shift)
//ELSE
//	ls_reading	= "Invalid Type"
//END IF
//
//return ls_reading
end function

