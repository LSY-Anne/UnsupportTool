$PBExportHeader$corr.srf
global type corr from function_object
end type

forward prototypes
global subroutine corr (double t, double p, ref double p_consistent, ref double rhol, ref double rhov, ref double delg)
end prototypes

global subroutine corr (double t, double p, ref double p_consistent, ref double rhol, ref double rhov, ref double delg);//subroutine corr ( t, p, p_consistent, rhol, rhov, delg )
//
//
//// CORR evaluates an adjustment to the Gibbs function.
// 
//
//  Discussion:
//
//    CORR is given T and P at or near the vapor pressure and evaluates
//    the corresponding liquid and vapor densities, and the residual
//    function DELG = (GL-GV)/(R*T) where GL and GV are the Gibbs functions
//    for the liquid and vapor phases, respectively.
//
//    These quantities are used to calculate a correction to the vapor 
//    pressure or the vapor temperature.  
//
//    The states corresponding to the coexisting phases of liquid
//    and vapor for the temperature range from the triple point
//    to within 0.5 C of the critical point 0.01 <= t <= tk-0.5 C
//    have been determined in exact accord with the Gibbs condition
//    of phase equilibrium: DELG = G(g)-G(l) = 0, P, t constant,
//    where G(g) and G(l) are the values of the Gibbs function
//    for saturated gas and liquid respectively.
//   
//    For the region (tk-t)<=0.5 C, an exact solution for the
//    Helmholtz function yields values of density for the saturated
//    liquid that are shifted to lower values.  Also, the isotherms
//    in the pressure-density plane and the Gibbs function-density
//    plane are nearly flat, so that it is difficult to obtain
//    solutions.  As an alternative to exact solution, the power
//    law equation is used to define states:
//  
//      rho(gas) = 0.322 - 0.657 * (1 - T/647.126)^0.325   (g/cm3).
//      rho(liq) = 0.322 + 0.657 * (1 - T/647.126)^0.325   (g/cm3).
//
//    In a poor instance of programming, the input pressure was
//    originally overwritten on output by a value consistent with
//    the computed densities.  This causes no end of misunderstandings,
//    since other routines expect the value of pressure to be input
//    only.  The code is now revised so that there is an input P
//    and an output P.  In a huff, JVB 05 February 2002.
//
//  Reference:
//
//    Lester Haar, John Gallagher and George Kell,
//    NBS/NRC Steam Tables:
//    Thermodynamic and Transport Properties and Computer Programs
//      for Vapor and Liquid States of Water in SI Units,
//    Hemisphere Publishing Corporation, Washington, 1984,
//    TJ270.H3
//
//    C A Meyer, R B McClintock, G J Silvestri, R C Spencer,
//    ASME Steam Tables: Thermodynamic and Transport Properties of Steam,
//    American Society of Mechanical Engineers, 1967.
//
//  Modified:
//
//    05 February 2002
//
//  Parameters:
//
//    Input, double T, the vapor temperature, in degrees Kelvin.
//
//    Input, double P, the vapor pressure, in MegaPascals.
//
//    Output, double P_CONSISTENT, the vapor pressure, in MegaPascals,
//    consistent with RHOL and RHOV.  This is equal to the input value of
//    P unless 646.3 <= T.
//
//    Input/output, double RHOL, the liquid density, in G/CM3.
//    On input, if RHOL is positive, it is used as an initial
//    estimate for the iteration.
//
//    Input/output, double RHOV, the vapor density, in G/CM3.
//    On input, if RHOV is positive, it is used as an initial
//    estimate for the iteration.
//
//    Output, double DELG, the residual function (GL-GV)/(R*T),
//    where GL is the liquid Gibbs function, GV the vapor Gibbs function, 
//    dimensionless.  If T > 646.3, DELG is 0.
//
//
  double a
  double ab
  double ar
  double cd
  double cjth
  double cjtt
  double cp
  double cv
  double cvb
  double cvr
  double dpdr
  double dpdrb
  double dpdrr
  double dpdt
  double dpdtb
  double dpdtr
  double g
  double gascon
  double gb
  double gl
  double gr
  double gv
  double h
  double hb
  double hr
  double p_crit = 22.055E+00
  double pb
  double pr
  double rho
  double rho_min = 1.0E-08
  double rho_start
  double s
  double sb
  double sr
  double tau
  double t_crit = 647.1260000001E+00
  double u
  double ub
  double ur
//
  p_consistent = p
//
//  Initialize output quantities.
//
  delg = 0.0E+00
//
//  Refuse to handle zero or negative temperatures.
//
  if ( t <= 0.0E+00 ) then
//	MessageBox('CORR - Fatal error','The input temperature T must be positive.  Input value was T = '+string( t))
	return
/*	
    write ( *, '(a)' ) ' '
    write ( *, '(a)' ) 'CORR - Fatal error//'
    write ( *, '(a)' ) '  The input temperature T must be positive.'
    write ( *, '(a,g14.6)' ) '  The input value was T = ', t
    stop*/
  end if
//
//  Refuse to handle zero or negative pressures.
//
  if ( p <= 0.0E+00 ) then
//	MessageBox('CORR - Fatal error','The input pressure P must be positive.  Input value was P = '+string(p))
	return
/*	
    write ( *, '(a)' ) ' '
    write ( *, '(a)' ) 'CORR - Fatal error//'
    write ( *, '(a)' ) '  The input pressure P must be positive.'
    write ( *, '(a,g14.6)' ) '  The input value was P = ', p
    stop*/
  end if

  if ( t <= 646.3E+00 ) then

    if ( rhol <= 0.0E+00 ) then
      rho_start = 1.11E+00 - 0.0004E+00 * t
    else
      rho_start = rhol
    end if

    dense ( p_consistent, t, rho_start, rho, dpdr )

    therm ( t, rho, a, cjth, cjtt, cd, cv, dpdr, dpdt, g, h, p_consistent, s, u )

    rhol = rho
    gl = g

    if ( rhov <= 0.0E+00 ) then
      rho_start = p_consistent / ( gascon() * t )
    else
      rho_start = rhov
    end if

    dense ( p_consistent, t, rho_start, rho, dpdr )

    rho = max ( rho, rho_min )

    therm ( t, rho, a, cjth, cjtt, cp, cv, dpdr, dpdt, g, h, &
      p_consistent, s, u )

    rhov = rho
    gv = g
    delg = ( gl - gv ) / ( gascon() * t )

    p_consistent = p

  elseif ( t <= t_crit ) then

    delg = 0.0E+00
    tau = 0.657128E+00 * ( 1.0E+00 - t / t_crit )^0.325E+00
    rhol = 0.322E+00 + tau
    rhov = 0.322E+00 - tau
    rho = rhov
    base ( t, rho, ab, cvb, dpdrb, dpdtb, gb, hb, pb, sb, ub )
    resid ( t, rho, ar, cvr, dpdrr, dpdtr, gr, hr, pr, sr, ur )
    p_consistent = pb + pr

  else

    rhol = 0.322E+00
    rhov = 0.322E+00
    p_consistent = p_crit
    delg = 0.0E+00

  end if
 
  return
end subroutine

